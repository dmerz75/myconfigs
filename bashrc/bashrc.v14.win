if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

xhost +local:root > /dev/null 2>&1

complete -cf sudo

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
# Enable history appending instead of overwriting.  #139609
shopt -s histappend
shopt -s checkwinsize
shopt -s expand_aliases


# alias cp="cp -i"                          # confirm before overwriting something
alias df='df -h'                          # human-readable sizes
alias du='du -h --max-depth=1'
alias free='free -m'                      # show sizes in MB
alias np='nano -w PKGBUILD'
alias more=less
# export QT_SELECT=4

# Change the window title of X terminals
case ${TERM} in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\033\\"'
		;;
esac

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
use_color=false
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		PS1='\[\033[01;31m\][\h\[\033[01;36m\] \W\[\033[01;31m\]]\$\[\033[00m\] '
	else
		# PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '
		# PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '
        PS1='\[\e[1;33m\][\u\w]\$\[\e[0m\]'
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

unset use_color safe_term match_lhs sh

# better yaourt colors
export YAOURT_COLORS="nb=1:pkg=1:ver=1;32:lver=1;45:installed=1;42:grp=1;34:od=1;41;5:votes=1;44:dsc=0:other=1;35"

#
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

# some more ls aliases
alias ls='ls --group-directories-first --color=auto -F'
alias ll='ls -l --group-directories-first --color=auto -F'
alias la='ls -a --group-directories-first --color=auto -F'
alias lt='ls -lthra --group-directories-first --color=auto -F'
alias e.='explorer .'
# alias lt='ls -lhtra'

# Directory Aliases:
alias doc='cd ~/Documents'
alias work='cd ~/Documents/'
alias ni='cd ~/Documents/nielsen/'
alias neb='cd ~/Documents/neighborhood'
alias eps='cd ~/Documents/neighborhood/nas_epsilon'
alias actions='cd ~/Documents/neighborhood/nas_epsilon/src/main/scala/com/pg/bigdata/template/actions'
alias sc='cd ~/Documents/scala'
alias req='cd ~/Documents/RequestData'
alias api='cd ~/Documents/nielsen_api'
alias notes='cd ~/notes'

# Gow + Scala + Java + Spark + Python:x
# /c/Progra~1 = /c/Program\ Files\ \(x86\)
# /c/Progra~2 = /c/Program\ Files
# MYSPARK=/c/opt/spark/spark-2.4.0-bin-hadoop2.6/

# Directories/Paths:
#INTELLIJ='/c/Program Files/JetBrains/IntelliJ\ IDEA\ Community\ Edition\ 2018.3.5'
MYSPARK=/c/opt/spark/spark-2.3.3-bin-hadoop2.6/
MYPYTHON=/c/ProgramData/Anaconda3/
PFILES86='/c/Progra~1'
PFILES='/c/Progra~2'
WINUTILS=/c/winutils/
GOW_HOME=$PFILES86/Gow  
GOW_HOME='/c/Program\ Files\ (x86)'
SCALA_HOME=/c/Program\ Files\ \(x86\)/scala/
JAVA_HOME=/c/Program\ Files/Java/jdk1.8.0_201/
R_HOME=/c/Program\ Files/R/R-3.5.3/

export SPARK_HOME=$MYSPARK
#export HADOOP_HOME=$MYSPARK
export HADOOP_HOME=$WINUTIL
export PYSPARK_DRIVER_PYTHON=ipython
export PYSPARK_DRIVER_PYTHON_OPTS=notebook

# Export Paths:
# export PATH=$PATH:"C:\ProgramData\Anaconda3"
# export PATH=$PATH:"C:\ProgramData\Anaconda3\Scripts"
export PATH=$WINUTILS/bin:$PATH
export PATH=$GOW_HOME:$PATH
# python, spark
export PATH=$MYPYTHON:$PATH
export PATH=$MYPYTHON/Scripts:$PATH
export PATH=$PATH:$MYSPARK/bin
# java, scala, R
export PATH=$JAVA_HOME/bin:$PATH
export PATH=$SCALA_HOME/bin:$PATH
export PATH=$R_HOME/bin:$PATH
export CLASSPATH=.:$CLASSPATH


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
eval "$('/c/ProgramData/Anaconda3/Scripts/conda.exe' 'shell.bash' 'hook')"
# <<< conda initialize <<<

